# -*- coding: utf-8 -*-
"""CognitiveComputingAssignment02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OL8nHYkxHLT5KccEyNEUK1R-z8WqJyqg

# Assignment 02
"""

#ques1: create a list L defined as = [10,20,30,40,50,60,70,80]
# i) WAP to add 200 and 300 to L
L = [10,20,30,40,50,60,70,80]
L.append(200)
L.append(300)
print(L)
# ii) remove 10 and 30 from L
L.remove(10)
L.remove(30)
print(L)
# iii) sort L in ascending order
L.sort()
print(L)
#iv) sort L in descending order
L.sort(reverse = True)
print(L)

#ques2. create a tuple score = (45,89.5,76,45.4,89,92,58,45)
score = (45,89.5,76,45.4,89,92,58,45)
print(score)
# i)identify highest score and index in the tuple
print(max(score))
print(score.index(max(score)))
# ii)identify lowest score and count how many time it appears
print(min(score))
print(score.count(min(score)))
# iii) reverse a tuple and return it as a list
print(list(reversed(score)))
# iv)check if a specific score '76' (input by user) is present in the tuple and
#print its first occurence index, or message saying it's not present
x = print(input('enter a number'))
if x in score:
    print(score.index(x))
else:
    print('not present')

#ques3 : Write a Program to create a list of 100 random numbers between 100 and
#900. Count and print them
import random
def is_prime(n):
  if n <= 1:
    return False
  for i in range (2,int(n**0.5) + 1):
    if n % i == 0:
      return False
  return True

L = [random.randint(100,900) for _ in range(100)]
print(L)
# i) count and print odd number from the list
odd_numbers = [num for num in L if num%2 != 0]
odd_count = len(odd_numbers)
print(odd_count)
print(odd_numbers)
# ii) count and print even number from the list
even_numbers = [num for num in L if num%2 == 0]
even_count = len(even_numbers)
print(even_count)
print(even_numbers)
# count and print prime number from the list
prime_numbers = [num for num in L if is_prime(num)]
prime_count = len(prime_numbers)
print(prime_numbers)
print(prime_count)

#ques4
# i) unique score by both the teams
A = {36,56,78,90}
B = {78,45,90,23}
unique_score = A.union(B)
print(unique_score)
# ii) score common to both the team
common_score = A.intersection(B)
print(common_score)
#iii) score exclusive to both
exclusive_score = A.symmetric_difference(B)
print(exclusive_score)
#iv)if A's score is subset of B and B's score is superset of A
is_subset = A.issubset(B)
is_superset = B.issuperset(A)
print(is_subset)
print(is_superset)
x = int(input('enter a score to remove: '))
if x in A:
  A.remove(x)
  print('score is removed')
else:
  print('score is not valid')
print(A)

# write a program to rename a key city to location in the dictionary
sample_dict = {
    "name" : "Kelly",
    "age" : 25,
    "salary" : 8000,
    "city" : "New York"
}
sample_dict['location'] = sample_dict.pop('city')
print(sample_dict)